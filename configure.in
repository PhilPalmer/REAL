AC_INIT(real,0.0.31,[gt1@sanger.ac.uk],[real],[http://www.dcs.kcl.ac.uk/pg/real/])
AC_CANONICAL_SYSTEM

AM_CONFIG_HEADER(real_config.hpp)
AM_INIT_AUTOMAKE(real,0.0.31)
AC_CONFIG_MACRO_DIR([m4])
AC_PROG_RANLIB

CFLAGS_SAVE="${CFLAGS}"
CFLAGS=""
AC_PROG_CC
CFLAGS="${CFLAGS_SAVE}"

CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS=""
AC_PROG_CXX
CXXFLAGS="${CXXFLAGS_SAVE}"

AC_LANG_PUSH([C++])
AC_HEADER_STDC
AC_LANG_POP

if test "${CXX}" = "g++" ; then
	CPPFLAGS="${CPPFLAGS} -W -Wall"
fi
if test "${CXX}" = "cl.exe" ; then
	CXXFLAGS="${CXXFLAGS} -EHsc -Gr"
	CPPFLAGS="${CPPFLAGS} -W1" # -Wall
fi

AC_ARG_ENABLE(optimization,
        AS_HELP_STRING([--enable-optimization],[use compiler optimization (default yes)]),
        [optimization=${enableval}],[optimization=yes])
AC_ARG_ENABLE(debug,
        AS_HELP_STRING([--enable-debug],[use compiler debug flags (default no)]),
        [debug=${enableval}],[debug=no])
AC_ARG_ENABLE(profile,
        AS_HELP_STRING([--enable-profile],[use compiler profiling flags (default no)]),
        [profile=${enableval}],[profile=no])
AC_ARG_ENABLE(static,
        AS_HELP_STRING([--enable-static],[use static linking (default yes)]),
        [static=${enableval}],[static=no])

AC_MSG_CHECKING([whether the we should enable static linking])
AC_MSG_RESULT([${static}])

if test "${static}" = "yes" ; then
	LDFLAGS="${CXXFLAGS} -static"
fi


if test "${fast}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -DNDEBUG"
fi

AC_ARG_ENABLE(openmp,
        AS_HELP_STRING([--enable-openmp],[use OpenMP (default yes)]),
        [openmp=${enableval}],[openmp=yes])

if test "${openmp}" = "yes" ; then
	AC_LANG_PUSH([C++])
	AX_OPENMP(have_openmp=yes,have_openmp=no)
	AC_LANG_POP
fi

if test "${debug}" = "yes" ; then
        CXXFLAGS="${CXXFLAGS} -g -O0"
        CFLAGS="${CFLAGS} -g -O0"
	openmp="no"
else
	if test "${profile}" = "yes" ; then
	        CXXFLAGS="${CXXFLAGS} -g -pg -fprofile-arcs -ftest-coverage"
	        CFLAGS="${CFLAGS} -g -pg -fprofile-arcs -ftest-coverage"
	else
		if test "${optimization}" = "yes" ; then
			case ${CXX} in
				g++)
					CXXFLAGS="${CXXFLAGS} -O3"
					CFLAGS="${CFLAGS} -O3"
					;;
				*-mingw32msvc-g++)
					CXXFLAGS="${CXXFLAGS} -O3"
					CFLAGS="${CFLAGS} -O3"
					;;
				*-mingw32-g++)
					CXXFLAGS="${CXXFLAGS} -O3"
					CFLAGS="${CFLAGS} -O3"
					;;
				cl.exe)
					CXXFLAGS="${CXXFLAGS} -O2 -Ob2 -Ot -Oy"
					;;
			esac
		fi

	fi
fi


AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-msse4"
AC_MSG_CHECKING([whether the C++ compiler supports the -msse4 flag])
AC_TRY_COMPILE([],[__builtin_popcount(4ul)],[sse4=yes],[sse4=no])
AC_MSG_RESULT([${sse4}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

if test "${sse4}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -msse4"
	CFLAGS="${CFLAGS} -msse4"
	CPPFLAGS="${CPPFLAGS}"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-ffloat-store"
AC_MSG_CHECKING([whether the C++ compiler supports the -ffloat-store flag])
AC_TRY_COMPILE([],[double c = 5],[floatstore=yes],[floatstore=no])
AC_MSG_RESULT([${floatstore}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

if test "${floatstore}" = "yes" ; then
	FFLOATSTORE="-ffloat-store"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-pthread"
AC_MSG_CHECKING([whether the C++ compiler supports the -pthread flag])
AC_TRY_COMPILE([#include <pthread.h>
pthread_mutex_t fastmutex = PTHREAD_MUTEX_INITIALIZER;],[
	pthread_mutex_lock(&fastmutex);
	pthread_mutex_unlock(&fastmutex);
],[pthread=yes],[pthread=no])
AC_MSG_RESULT([${pthread}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

if test "${pthread}" = "yes" ; then
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="${CXXFLAGS} -pthread"

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_post,sem_post=yes,sem_post=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_wait,sem_wait=yes,sem_wait=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_init,sem_init=yes,sem_init=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_destroy,sem_destroy=yes,sem_destroy=no)
	AC_LANG_POP

	CXXFLAGS="${CXXFLAGS_SAVE}"
fi

if [[ "${ac_cv_func_sem_post}" = "yes" ]] ; then
	AC_DEFINE([HAVE_SEM_POST],[1],[have the sem_post function])
else
	pthread="no"
fi

if [[ "${ac_cv_func_sem_wait}" = "yes" ]] ; then
	AC_DEFINE([HAVE_SEM_WAIT],[1],[have the sem_wait function])
else
	pthread="no"
fi

if [[ "${ac_cv_func_sem_init}" = "yes" ]] ; then
	AC_DEFINE([HAVE_SEM_INIT],[1],[have the sem_init function])
else
	pthread="no"
fi

if [[ "${ac_cv_func_sem_destroy}" = "yes" ]] ; then
	AC_DEFINE([HAVE_SEM_DESTROY],[1],[have the sem_destroy function])
else
	pthread="no"
fi

if test "${pthread}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -pthread"
	CFLAGS="${CFLAGS} -pthread"
	CPPFLAGS="${CPPFLAGS}"
	AC_DEFINE([HAVE_PTHREADS],[1],[pthreads])

	if [[ "${have_openmp}" = "yes" ]] ; then
		CXXFLAGS="${CXXFLAGS} -fopenmp"
		CFLAGS="${CFLAGS} -fopenmp"
	fi
else
	AC_MSG_NOTICE([Required thread functionality not found, disabling multi threading.])
fi

AC_CHECK_HEADER(unistd.h, [unistd=yes], [unistd=no])
AC_CHECK_HEADER(sys/sysctl.h, [sys_sysctl=yes], [sys_sysctl=no])
AC_CHECK_HEADER(sys/types.h, [sys_types=yes], [sys_types=no])
AC_CHECK_HEADER(linux/sysctl.h, [linux_sysctl=yes], [linux_sysctl=no])
AC_CHECK_HEADER(windows.h, [windows_h=yes], [windows_h=no])
AC_CHECK_HEADER(dirent.h, [dirent_h=yes], [dirent_h=no])
AC_CHECK_HEADER(sys/stat.h, [sys_stat_h=yes], [sys_stat_h=no])
AC_CHECK_HEADER(sys/time.h, [sys_time_h=yes], [sys_time_h=no])
AC_CHECK_HEADER(aio.h, [aio_h=yes], [aio_h=no])

if [[ "${unistd}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_UNISTD_H],[1],[unistd.h header])
fi
if [[ "${sys_sysctl}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_SYS_SYSCTL_H],[1],[sys/sysctl.h header])
fi
if [[ "${linux_sysctl}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_LINUX_SYSCTL_H],[1],[linux/sysctl.h header])
fi
if [[ "${sys_types}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_SYS_TYPES_H],[1],[sys/types.h header])
fi
if [[ "${windows_h}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_WINDOWS_H],[1],[window.h header])
fi
if [[ "${dirent_h}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_DIRENT_H],[1],[dirent.h header])
fi
if [[ "${sys_stat_h}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_SYS_STAT_H],[1],[sys/stat.h header])
fi
if [[ "${sys_time_h}" = "yes" ]] ; then 
	AC_DEFINE([HAVE_SYS_TIME_H],[1],[sys/time.h])
fi

AIOPRESENT=no
if [[ "${aio_h}" = "yes" ]] ; then 
	AC_CHECK_LIB([rt],[aio_suspend],[aiolib=yes],[aiolib=no])
	
	if [[ "${aiolib}" = "yes" ]] ; then
		AC_DEFINE([HAVE_AIO_H],[1],[aio.h])
		LIBS="${LIBS} -lrt"
		AIOPRESENT=yes
	fi
fi

AC_DEFINE([SLOW_UNIQUE_FASTA_READER_TYPE],[FastAReader],[reader type for fast a])
AC_DEFINE([SLOW_UNIQUE_FASTQ_READER_TYPE],[FastQReader],[reader type for fast q])
AC_DEFINE([FAST_UNIQUE_FASTA_READER_TYPE],[FastFileDecoder],[reader type for fast a])
AC_DEFINE([FAST_UNIQUE_FASTQ_READER_TYPE],[FastQualityFileDecoder],[reader type for fast q])

AC_DEFINE([SLOW_ALL_FASTA_READER_TYPE],[FastAReader],[reader type for fast a])
AC_DEFINE([SLOW_ALL_FASTQ_READER_TYPE],[FastQReader],[reader type for fast q])

AC_DEFINE([_FILE_OFFSET_BITS],[64],[file offset bits])

AC_DEFINE([EPSILON],[1e-6],[epsilon for fp comparison])

AC_LANG_PUSH([C++])
AC_MSG_CHECKING([whether the we are using GCC version >= 4.4])
AC_TRY_COMPILE([#if __GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 4)
int dummy;
#else
gcc version too small
#endif
],[],[gcc44=yes],[gcc44=no])
AC_MSG_RESULT([${gcc44}])
AC_LANG_POP

if [[ "${gcc44}" = "yes" ]] ; then 
	AC_DEFINE([MATCHING_SINGLE_INSTANTIATION],[1],[single template instantiations])	
fi

case $target_cpu in
	i386|i486|i586|i686)
		AC_DEFINE([HAVE_i386],[1],[i386])
		;;
	x86_64)
		AC_DEFINE([HAVE_i386],[1],[i386])
		AC_DEFINE([HAVE_x86_64],[1],[x86_64])
		;;
esac

PACKAGE_NAME=${PACKAGE}
PACKAGE_VERSION=${VERSION}

AC_SUBST([PACKAGE_NAME])
AC_SUBST([PACKAGE_VERSION])
AC_SUBST([FFLOATSTORE])
AC_SUBST([HAVEI386])
AC_SUBST([HAVEX8664])
AC_OUTPUT(Makefile src/Makefile real.spec ubuntu.sh)
